// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX2/bNhD/KgS3p8CIKdm1a/cpcYKhG7AEbbCXIjAY6WSzkEiVpJIagb/7QEqyRZmO",
	"bSVduwJFZIm/+/u7I4/POBJZLjhwrfD0GUtQueAK7A+lqS5U/cq8iQTXwLV5pHmesohqJnj/qxLcAqIl",
	"ZNQ8/S4hwVP8W38rvl9+Vf1SLF6v1z0cg4oky40UPK0UogyUogtAT0wvUfUuEjEgyuP6IzboSqI1p9DL",
	"uVGWghE2b1qdS5GD1Kz0qhYwfcbwnRoAnuI8BaoAPVGmcQ/rVQ7WHMn4AhtFpclNSNDDiZAZ1XiKGdeD",
	"cItjXMMCpAFqSbmiUenfy2ExHgjJFGxtNz5K+FYwCTGefqnN6G18uN/oFA9fIdJGpUfOTgxiqunp9swt",
	"bN3DIKWQbgA1y0AU3uBJUEWqT1Jn1redL5VuxB3n+rz21PWfstg1/4JU/4YBCYjPC5qJomT+BhWOJ8Rl",
	"wWjoZUFEZXzIf7umWjvXEC1dVUexLZKrXAvXs9mMXI1nl1eTaxJehBf+BEXAcj3nrZwSEho9RzioQWaM",
	"03Tejms4ISQgZORTayijNM3yFoSEARkEBJHJ8P1g4EUWkotHkK+w+LHYAQeEjEfDySTcVdmiYiNgrjGb",
	"FFQ5r/W4EdqQqRmDg3yuagh4kRkbcuCxsa2HVRFFoFQlrSxC+iBks0a2sau56BYEp5nbEYkHmlM+h2Qn",
	"x2dnZ2eo+n+G3o1Db7YVfCuAR9AO+5F91L5x7TsIa2XN+litajrj2ubLA/B4LpJ5TFf/7y2m4cfr9hif",
	"oE6bjEfQD91lXH0dt5m9RvtC0GLBICDelqYYX6Qw10LTVB08QTmLq1baamZj8i4MvM3ToFyehYPhcRuZ",
	"ljSCdgGHg+ER4FaYa0m9MkaVC7V17XgczsIbdcedNLj5nJm2fZHB95d60Z7YWewV4yBVV/T1zEEOT0AW",
	"UtSdv4vmP2eXXaE3egmyK/gfpmgH7Kdyg/5bXnPX5XFwGv6zptI99I3eHyXhzjCoI1MstjNTLLrFlHBE",
	"TgF3J4vFdyOLhXYliwV3Isva01q2e7Fb/mYItW3dmVo/bydUfNSO3TgeeCXV3w8dQyuN+zdqA2A8Ebua",
	"bukqA67RFTyyCNDF7UfbILXdO27vyt+PIFW5nJwH58SYLnLgNGdmIzsn54E9R+mlDU6/7KomaELZvyZ0",
	"9oLgY2xGLPu59ACUvhTx6qQrBTcV9RG8TklzBiCBnSGCcBwMyMA8eUPpCZYbJOuQQrLgnPEFqk/j1kCU",
	"S2H3lfLosb00CQnZt31v1vVbNyvrHh52gVmbt5PzC7HfLHmr+G/H4VbM7HvEOIrATjinT8tvkNpmlWxm",
	"LUfu/RH5Z5xpRjWgvKoWhwEfEM0ZemJpilKxQMaBDGK7vqpIhRIpMnR79wHRRINElUBDH70EV5ydLOxg",
	"gbJCafQAKBdpCjEquGapBUgwwyYqjzuI8dhkCxQCZtomqo46SEhkqWtkicQif0G2NkapI4g72y7+hVqI",
	"71LgaHoVCpAWNsvo9q5K8zYodeoSxplaQrwvd29yJ7v3+tRjd/3NGFhRLinSBrlfyRDgsUhiumqyYk9h",
	"Ao+NFTFdvb4aa7X/TSH2WkS/5vFNckVX+KcXqBOH3fp8HYf3ud0q7x/E8gP3OD+B6xrKqC7AE9xPlmUK",
	"3fy1E7c/QN8Z6FuwpTRFgXy0A8eXZ1zIFE/xUut82u+nIqLpUig9fU9GBK/v1/8GAAD//8BWYzo1GgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
