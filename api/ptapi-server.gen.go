// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /display_text)
	DisplayText(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (POST /register)
	Register(ctx echo.Context) error

	// (POST /register_completion)
	RegisterCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// DisplayText converts echo context to params.
func (w *ServerInterfaceWrapper) DisplayText(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DisplayText(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx)
	return err
}

// RegisterCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/display_text", wrapper.DisplayText)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.POST(baseURL+"/register", wrapper.Register)
	router.POST(baseURL+"/register_completion", wrapper.RegisterCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QUYEL78t/wkAAP//zqSOyfogAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
