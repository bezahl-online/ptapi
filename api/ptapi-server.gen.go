// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWzW7jNhB+FYLtyTBiSnbjtXrKJkWx6KFBm9tiYTDU2OZCIrnkKGkQ+N0LUpRsykqd",
	"7ObSAAFkcoYz3ze/z1To2mgFCh0tnqkFZ7RyEH445Ni47sifCK0QFPpPbkwlBUep1eyr0yooiB3U3H/9",
	"bGFDC/rT7PD8rL11s/ZZut/vp7QEJ6w0/hVaRIOkBuf4FsijxB2JZ0KXQLgqu0vqteOLwZ0Gd9pKB+tj",
	"f43VBizKFk/J8axzp++sg9p+SsFabb0+/MNrUwEtKMoadIN0SvHJQEBgpdp6aQuuqfBN5rz8Pqh+a6SF",
	"khafo9H+uS+9JX3/FQR6Sy+5fIKfyzJ1/4rFv0XGMjaGgte6aePda+XLFZvSjbY1R1pQqfBycVCVCmEL",
	"1usKbstz+INMlF0jiF1qKrUzz8ft2CeDOkV2fc1ultcfb1a/sfwqvxoPkABpcK0GMWUs93ZeARDB1lLx",
	"aj3kNV8xljF2OWbWp4xDXpuBCsszNs8YYavFh/l8VLOxSj+A/QGPH5oT5Yyx5eVitcpPTQ5S8Yiw1Jk+",
	"BDHmnZ2UoT6Zjjk4m8+xhkA1tffBNUKAc/GNtvT4vbbHlXFgrMvAtAwUryHhgI2oGq7WsDmJ7GQymZD4",
	"PyG/LPPRGDv41oASMCQ7e1U+tyepf2fVBrEKGKPUMZjUtzH2fZFW4Bvyf3TSrgkn3JgKuAPyyOVoQ4xt",
	"/zv4sFw5LtoZ8dbufcJMdGPaYxgj4eBrittPoTBJkrH192FE0VchOqJv9KXu/lxFRosvI/EKUm30qaVb",
	"/lSDQnIDD1IAubr9FGoKQyRv79rfD2BdK84usgvmXdcGFDeSFnR+wS6ykFy4C+Qc2A/EaRcq19MXtoRP",
	"pZ84vUiLBBx+1OXTm3aLwVDrJ1QKsD0nUhEBoem8fYB1Da+L+nHHZVno2Fm+zOZs7r/ORit6Oh6l1Hmp",
	"JEqOQEwbpl8JN5JIF7Yh2DRVWIUeZVWRmiu/K4UDh9oC8QhqKIN+TA1HNlbX5PYuiFV6SyQSgppw4leF",
	"e+4LZZpufzljL5VbLzcbrIj7KV18j1qg4Kh6D03oFal0fRB+r6R658gnz/3P4v8uK//YUBmB3d0RvSFx",
	"0gesMdLB8g/mGEKbS1sY6Rl/gV9rHPnzDzodZNvvgHde9T2KpHXFgfX9lRafn2ljK1rQHaIpZrNKC17t",
	"tMPiA7tkdP9l/28AAAD//6CwiX+mDQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
