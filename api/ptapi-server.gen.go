// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXzW4bNxB+FYLtSRAs7kq1ou3JsYsi6KFG61tgCPTuSGKwSzLkrF3D0LsX5P6v6EhO",
	"dHAMGJbIGc583/z6haaq0EqCREuTF2rAaiUt+C8WOZa2OXInqZIIEt1HrnUuUo5CydkXq6RXSHdQcPfp",
	"VwMbmtBfZt3zs+rWzqpn6X6/n9IMbGqEdq/QpDZICrCWb4E8CdyR+ixVGRAus+aSOu36Re9OiTtlhIV1",
	"319tlAaDosKTcTzq3OE7a6+2n1IwRhmnD//xQudAE4qiAFUinVJ81uARGCG3TtqALXN8kzknv/eqX0th",
	"IKPJ59po+9x9a0k9fIEUnaXXXD7Az0U2dP+K1T+LiEUshIIXqqzi3WrFyxWb0o0yBUeaUCHxctGpComw",
	"BeN0U26yY/i9TC27Rkh3Q1NDO/M4bMc8a1RDZNfX7GZ5/fFm9QeLr+KrcIBSEBrXchRTxmJn5wSACKYQ",
	"kufrMa/xirGIscuQWZcyFnmhRyosjtg8YoStFh/m86BmaaR6BPMDHj+WB8oRY8vLxWoVH5ocpWKPsKEz",
	"bQjqmDd2hgy1ydTn4Gg+1zUEsiycDxpk5nybUlumKVhbv1YVIX9Qpl8jHXdNLg4LQvICBmywgKrmcg2b",
	"gxhPJpMJqX8n5LdlHIy2ha8lyBTGtEcnZXZ1MvTvqNooah5jLdUHM/QtFAdXrjm41vyNntq04wE3Ogdu",
	"gTxxEWyN9QD4Dj4Ml5an1bR4ax8/YKZ2Y9piCJHQ+TrE7eaRnymDAfZvN6zoSYh69AVfau6P1WZt8XUk",
	"TkHIjTq0dMufC5BIbuBRpECubj/5mkIfydu76vsjGFuJs4vogjnXlQbJtaAJnV+wi8gnF+48ObOqEB1p",
	"yvq/jjq/K3zK3Nzx1xUCsPhRZc9v2i6GoWj6UhOSfmNkkW+sUbyM5mzuPgWpDJA1JMkDssSUUgq5JU12",
	"eQeJNsq3omrqd/tTzNhradrKzUZL1n5KF9+j5n3usv4b3Lci5+K/2xFGnPlzIiRJwbf9t68QZwhtv0ra",
	"ATR49/6E+AspUHAEoqtq+Z1wLYiwfj2FTZn73fRJ5DkpuHTLqz+wqAwQB6iAzOvXFWrJxqiC3N55sVxt",
	"iUBCUBFO3O72wKtUeC/ptO5mwQmZdd0Jv6MaD60yP2P8z/I/WGi2B2A3d0RtSL1weaz99veDOYZQ5dIW",
	"Ai3kH3B7piV//0Wno2z7E/DOqZ6jSCpXLBg35mjy+YWWJqcJ3SHqZDbLVcrznbKYfGCXjO7v9/8HAAD/",
	"/1PAeUc3DwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
