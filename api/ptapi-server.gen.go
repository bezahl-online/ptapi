// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY3W7buBJ+FYLnXAVGTMmuXbtXiRMsugU2QRvsTREYjDSyWEikSlJJjcDvviAl2aIs",
	"x7KSbrsFisgSv/n9ZsjhMw5EmgkOXCs8f8YSVCa4AvtDaapzVb0ybwLBNXBtHmmWJSygmgk+/KYEt4Ag",
	"hpSap/9LiPAc/2+4Ez8svqphIRZvNpsBDkEFkmVGCp6XClEKStEVoCemY1S+C0QIiPKw+ogNupRozcl1",
	"vDTKEjDClnWrMykykJoVXlUC5s8YflADwHOcJUAVoCfKNB5gvc7AmiMZX2GjqDC5DvEGOBIypRrPMeN6",
	"5O9wjGtYgTRALSlXNCj8ezksxgMhmYKd7cZHCd9zJiHE86+VGYOtD/dbneLhGwTaqGyRsxeDkGp6uj1L",
	"C9sMMEgppBtAzVIQeWvwJKg80SepM+ubzhdKt+K6ub6sPHX9pyx0zb8g5b+xRzzS5gVNRV4wf4vypzPi",
	"smAybmVBQGV4zH+7ply71BDErqpObAvkOtPC9WyxIFfTxeXV7Jr4F/5Fm2tBLiXwYO3y2x910sl41ND4",
	"iUoNiD6sIIGYH6BEACzTS95gESG+0dIhpBpkyjhNls1M+jNCPEImbWoNSZWmadaAEN8jI48gMhu/H41a",
	"kbnk4hHkKyx+zPfAHiHTyXg28/dVNshfC5hrzDbpJcsqPW6EtvStx6CW+DKNR2uqrGPgeWqsyoCHxtoB",
	"VnkQgFKl/KIR0Ach63VaI1xZD25Rcpq6XZm0QDPKlxDtZf3s7OwMlf/P0Lup35p/Bd9z4AE0E9Gxl9s3",
	"rn1HYY08Wh/LVXVnXNva8gA8XIpoGdL1f3ubq/nxun2uTVCvja5F0E/d6Vx9Pbe6g0a3haDBgpFHWpuc",
	"YnyVwFILTRN19BTnLC6ba6O9Tck732ttpwbV3G7G3TZTLWkAzQL2R+MO4EaYK0mDIkalC5V1zXgcz8Ib",
	"dce9NLj5XJhGfpHCj5d60YHYWewV4yBVX/T1wkGOT0DmUlSdv4/mPxeXfaE3OgbZF/w3U7QH9nOxZf8l",
	"r7nr8tQ7Df9FU+kePCfvO0m4MwzqyRSL7c0Ui24wxZ+QU8D9yWLx/chioX3JYsG9yLJpaS27vdgtfzMI",
	"27buTM5fdlMy7rRj144HrZKq78cOpqXGwxv1pjYjuJpu6ToFrtEVPLIA0MXtR9sgtd07bu+K348gVbGc",
	"nHvnxJguMuA0Y2YjOyfnnj1H6dgGZ1h0VRM0oexfEzp7SfExNGOe/Vx4AEpfinB90rWGm4rqUF6lpD4V",
	"EM9OFZ4/9UZkZJ5aQ9kSLDdI1iGFZM454ytUncatgSiTwu4rxdFjd3HjE3Jo+96uGzZudzYDPO4Dszbv",
	"pvcXYr9d8lbx343kjZjZ94hxFICdeU6f2N8gtfUq2U5fjtz7DvlnnGlGNaCsrBaHAR8QzRh6YkmCErFC",
	"xoEUQru+rEiFIilSdHv3AdFIg0SlQEMfHYMrzk4WdrBAaa40egCUiSSBEOVcs8QCJJjxExXHHcR4aLIF",
	"CgEzbROVRx0kJLLUNbJEZJG/IVtro1QH4i52i3+jFtJ2TdCZXrkCpIXNMrq9K9O8C0qVuohxpmIID+Xu",
	"Te6FD17htthdfTMGlpSL8qRG7lcyBHgoopCu66w4UJjAQ2NFSNevr8ZK7b9TiIMG0a95eBNd0TX+5QXq",
	"xGG/Pl/H4UNuN8r7J7H8yD3OL+C6hiKqK2gJ7mfLMoVuPu3F7Q/Qdwb6FmwpTFEgH+3A8fUZ5zLBcxxr",
	"nc2Hw0QENImF0vP3ZELw5n7zTwAAAP//+zjBerkaAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
