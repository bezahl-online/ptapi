// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVb2vbPhD+KuJ+v1chxLKTJY3fpe0YZbCVru9KCZp8SVRiSZXO3ULxdx/yn7R2vK2F",
	"BYJtWc89z3OnOz+DNLk1GjV5SJ/BobdGe6wePAkqfLsUVqTRhJrCrbB2r6QgZXT04I2uAHKHuQh3/zvc",
	"QAr/RS/ho/qtj+qwUJblGDL00ikbokDaELIcvRdbZD8U7VizJk2GTOisfQkB3UQMhKuCdsYpjzev5Fpn",
	"LDpStR2hsnDBnyK3e4QUVrz5zWIecxgDHSxWMpzSWyjHIHJT1HaPqGSx5GPYGJcLghSUpvnsBao04RZd",
	"wErhsr+lotrT7F0Tyl2XqsszTYZ53MGS6Tq7uOCXi4vzy+VHnqyS1ZA1hxKVpbV2XSjnEedJMgQhdLnS",
	"Yr/uJzJZch5zPh8EqRw9idz2IDyJ+TTmjC9nZ9PpEPKp+NLTFnO+mM+WywF15XHFfH9ASa8r0D0GWuTY",
	"CcsHuK3Qa9ycGB2NRiPW/EfswyIZtOzxsUAtsZ/b+E31rFf+qG/IbNNVJ3ZD44Rrt9O+vXQVvElV23a/",
	"i9S+H9Lq8LFQDjNI76BhbLffnzgJAKU35pTpWhxy1MQu8UlJZKvrq8CmqKrM9W39/ITO19v5JJ7wIN1Y",
	"1MIqSGE64ZMYQnVpVyUnEu3YqBJnfNXrIX3VYLvKwpQ4bqmdoKdzkx3eNQ57g+g4VboG63WmNJMh6vjd",
	"Q6eXa4db5QldOMbDie7yK61ICUJm60zXY+LVByHh/J99BU4H9oCilp2ZDfOFlOj9ptiztmoVb1A5q4UN",
	"8R0NRL3PWVnxRYR10bc4UJEbpMJpz75+hnHvWHxCug3Q4RS9W0k1Nlw4vZDePUPh9pDCjsimUbQ3Uux3",
	"xlN6xuccyvvyVwAAAP//Azpgu7cHAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
