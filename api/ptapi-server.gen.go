// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWzW7jNhB+FYLtyTBiSnbjtXrKJkWx6KFBm9tiYTDU2OZCIrnkKGkQ+N0LUpRsykqd",
	"7ObSAAFkcoYz33zz90yFro1WoNDR4placEYrB+GHQ46N6478idAKQaH/5MZUUnCUWs2+Oq2CgthBzf3X",
	"zxY2tKA/zQ7Pz9pbN2ufpfv9fkpLcMJK41+hRTRIanCOb4E8StyReCZ0CYSrsrukXju+GNxpcKetdLA+",
	"9tdYbcCibPGUHM86d/rOOqjtpxSs1dbrwz+8NhXQgqKsQTdIpxSfDAQEVqqtl7bgmgrfZM7L74Pqt0Za",
	"KGnxORrtn/vSW9L3X0Ggt/SSyyf4uSxT969Y/FtkLGNjKHitm5bvXitfrtiUbrStOdKCSoWXi4OqVAhb",
	"sF5XcFuewx9kouwaQexSU6mdeT5uxz4Z1Cmy62t2s7z+eLP6jeVX+dU4QQKkwbUacMpY7u28AiCCraXi",
	"1XoY13zFWMbY5ZhZnzIOeW0GKizP2DxjhK0WH+bzUc3GKv0A9gc8fmhOlDPGlpeL1So/NTlIxaOApc70",
	"FETOOztphPpkOo7B2XyONQSqqb0PBlTpfZtS1wgBzsXX2iLk99oe18ghdl0upgWheA1JNNiIquFqDZsT",
	"jieTyYTE/wn5ZZmPsu3gWwNKwDDs2asyuz1J/TurNmAtYIxSx2BS38Z48OVagW/N/9FTu3acxMZUwB2Q",
	"Ry5HW2McAN8RD8uV46KdFm/t4yeRiW5MewxjQTj4muL28yjMlGSA/X0YVvRViI7CN/pSd3+uNqPFl5F4",
	"Bak2+tTSLX+qQSG5gQcpgFzdfgo1hYHJ27v29wNY14qzi+yCede1AcWNpAWdX7CLLCQX7kJwDtEPgdMu",
	"1LAPX9gXPpV+9vQiLRJw+FGXT2/aMgbjrZ9VKcD2nEhFBIT28/ZR1rW+jvXj3suy0LuzfJnN2dx/nWUr",
	"ejrOUuq8VBIlRyCmpelXwo0k0oW9CDZNFZaiR1lVpObKb03hwKG2QDyCGsqgH1PDkY3VNbm9C2KV3hKJ",
	"hKAmnPil4Z77Qpmme2DO2Evl1svNBsvifkoX36MWQnBUvYcm9IpUuj4Iv1dSvTPzyXP/M/7fZfkfGyoj",
	"sLs7ojckTvqANTIdLP9gjiG0ubSFkZ7xF/gFx5E//6DTQbb9DnjnVd+jSFpXHFjfX2nx+Zk2tqIF3SGa",
	"YjartODVTjssPrBLRvdf9v8GAAD//yZPSFWwDQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
