// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXzW7jNhB+FYLtyTBiSnbjtXrKJkWx6KFBm9tiYTDU2OZCIrnkKGkQ+N0LUpRsykqd",
	"7ObSAAEkaoYz3ze/fqZC10YrUOho8UwtOKOVg/DikGPjuiN/IrRCUOgfuTGVFBylVrOvTqugIHZQc//0",
	"s4UNLehPs8P1s/arm7XX0v1+P6UlOGGl8bfQIhokNTjHt0AeJe5IPBO6BMJV2X2kXjveGNxpcKetdLA+",
	"9tdYbcCibPGUHM86d3rPOqjtpxSs1dbrwz+8NhXQgqKsQTdIpxSfDAQEVqqtl7bgmgrfZM7L74Pqt0Za",
	"KGnxORrtr/vSW9L3X0Ggt/SSyyf4uSxT969Y/FtkLGNjKHitmzbevVa+XLEp3Whbc6QFlQovFwdVqRC2",
	"YL2u4LY8hz/IRNk1gtilplI783zcjn0yqFNk19fsZnn98Wb1G8uv8qvxAAmQBtdqEFPGcm/nFQARbC0V",
	"r9ZDXvMVYxljl2Nmfco45LUZqLA8Y/OMEbZafJjPRzUbq/QD2B/w+KE5Uc4YW14uVqv81OQgFY8IS53p",
	"QxBj3tlJGeqT6ZiDs/kcawhUU3sfDKjS+zalrhECnIu3tUXI77U9rpEDd10upgWheA0JG2xE1XC1hs1J",
	"jCeTyYTE/wn5ZZmPRtvBtwaUgCHt2asyuz1J/TurNohawBiljsGkvo3FwZdrBb41/0dP7dpxwo2pgDsg",
	"j1yOtsY4AL6DD8uV46KdFm/t4yfMRDemPYYxEg6+prj9PAozJRlgfx+GFX0VoiP6Rm/qvp+rzWjxZSRe",
	"QaqNPrV0y59qUEhu4EEKIFe3n0JNYYjk7V37/gDWteLsIrtg3nVtQHEjaUHnF+wiC8mFu0DOgf1AnHah",
	"hj19YV/4VPrZ04u0SMDhR10+vWnLGIy3flalANtzIhURENrP20dZ1/q6qB/3XpaF3p3ly2zO5v7pbLT6",
	"RpjcOx60FItUEiVHIKaN2q+EG0mkC2sSbJoq7EiPsqpIzZVfosKBQ22BeEA1lEE/ZoojG6trcnsXxCq9",
	"JRIJQU048TvEPfd1M03Xwpyxl6qvl5sNdsf9lC6+Ry1QcFTMh570isy6Pgi/V469cyL8n+P/Lr8FxmbM",
	"COzuG9EbEgd/wBojHSz/YI4htLm0hZEW8hf4fceRP/+g00G2/Q5451Xfo0haVxxY325p8fmZNraiBd0h",
	"mmI2q7Tg1U47LD6wS0b3X/b/BgAA//+2IP6Kvw0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
