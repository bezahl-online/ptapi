// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /display_text)
	DisplayText(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (POST /register)
	Register(ctx echo.Context) error

	// (POST /register_completion)
	RegisterCompletion(ctx echo.Context) error

	// (POST /status)
	Status(ctx echo.Context) error

	// (POST /status_completion)
	StatusCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// DisplayText converts echo context to params.
func (w *ServerInterfaceWrapper) DisplayText(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DisplayText(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx)
	return err
}

// RegisterCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterCompletion(ctx)
	return err
}

// Status converts echo context to params.
func (w *ServerInterfaceWrapper) Status(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Status(ctx)
	return err
}

// StatusCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) StatusCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StatusCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/display_text", wrapper.DisplayText)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.POST(baseURL+"/register", wrapper.Register)
	router.POST(baseURL+"/register_completion", wrapper.RegisterCompletion)
	router.POST(baseURL+"/status", wrapper.Status)
	router.POST(baseURL+"/status_completion", wrapper.StatusCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
