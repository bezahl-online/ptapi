// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWYW/yNhD+K5a3TwgRJzB4yTfedpqqSVu19VtVIdc5wFViu/aFDVX575OdBEhIRdHe",
	"SpUS+5577jlfHvNBhS6MVqDQ0fSDWnBGKwfhxSHH0rVLfkVohaDQP3Jjcik4Sq2iN6dVAIgdFNw//Wxh",
	"Q1P6U3RKH9W7LqrT0qqqxjQDJ6w0PgtNG0JSgHN8C+QfiTvSrAmdAeEqazepRzcZQzkl7rSVDtbn9Rqr",
	"DViUtZ6M49XiLvOsA6waU7BWW4+Hf3lhcqApRVmALpGOKR4MBAVWqq2PtuDKHG+i8/FVgL6X0kJG0+eG",
	"9Jju5cikX99AoGf6rOQL/Vxm3fJXrPmbxSxmQyp4ocv6vI+oZLFkY7rRtuBIUyoVzmcnqFQIW7AeK7jN",
	"rukPMU3sGkHsulRdnmkyzGMPBnVX2d0du1/cfb9f/sqSVbIaPiAB0uBa9c6UscTzfEEggi2k4vm639dk",
	"yVjM2HyI1o+MQ16YHoQlMZvGjLDl7Nt0OogsrdJ7sP+j4n35Rw8bM7aYz5bL5JKxujZrzXyDKgs/qq4U",
	"Apyj47PPgr9qez61JzXtdHRHVPECOgWyAajhag2bi66PRqMRaf5H5JdFMth/B+8lKAH9LsZfmrV6pVvf",
	"VVjvkw4am6hzMd3ahr70xjkvuubNMRhcx03/Pjkn/ZK41lo/y9TuD03KucCGsQ2/VOIBUm30JdMjPxSg",
	"kNzDXgogq8eHME4YDvjxqX7fg3V1OJvEE+ZL1wYUN5KmdDphkzj0FXehOSePDY3TLgytb1+4vB4yb4TH",
	"kFoJOPyus8NNV17Pa4/G2RVYrxOpiPBZxzf7aq/XDc9wj7vUUkmUHIGYusnNLXW67xPGftglP3AfD5TU",
	"7hG9IY19bMqctOBA7Muc1ZUNER4VRL2fK1XgixDqA9/CwGn8Bd5UHfnzdzrujcRvgE8eOtyjmysJzmP9",
	"5NL0+YOWNqcp3SGaNIpyLXi+0w7Tb2zOaPVS/RcAAP//VN75t5cJAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
