// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX2/bNhD/KgS3p8CIKdmNG/cpdYKhK7AGbbCXojAY6WSzkEiVPKU1An/3gZRki7Ic",
	"20q6bgWKyBJ/9/fHOx4faaSyXEmQaOj0kWowuZIG3A+DHAtTv7JvIiURJNpHnuepiDgKJYdfjZIOEC0h",
	"4/bpdw0JndLfhlvxw/KrGZZi6Xq9HtAYTKRFbqXQaaWQZGAMXwD5LnBJqneRioFwGdcfqUVXEp05BS7n",
	"VlkKVti8aXWuVQ4aRelVLWD6SOEHtwA6pXkK3AD5zgXSAcVVDs4cLeSCWkWlyU1IMKCJ0hlHOqVC4ijc",
	"4oREWIC2QNRcGh6V/j0dFuuB0sLA1nbro4ZvhdAQ0+nn2ozBxocvG53q/itEaFV2yNmJQcyRn27P3MHW",
	"AwpaK+0HEEUGqugMngZTpHiSOru+7XypdCPuONfntae+/1zEvvlXrPo3DljAurzgmSpK5m9Q4eSS+Sy4",
	"GHeyIOI6PuS/W1OtnSNES1/VUWyL9CpH5Xs2m7Hryezt9eUNC6/Cqy7XokJrkNHK53c4OkqnkElL43uu",
	"EQi/X0AKS7mHEhGIHOeyxSLGQqvliJAi6ExIns7bmQwvGQsYu+hSa0lqkGd5C8LCgI0CRtjl+PVo1Iks",
	"tFQPoJ9h8UOxAw4Ym1yMLy/DXZUt8jcC5huzSXrFslqPH6ENfZsxaCS+SuPBPVXtY5BFZq3KQcbW2gE1",
	"RRSBMZX8shDwe6Wb+7RBuGo/+JtS8syvyqwDmnM5h2Qn62dnZ2ek+n9GXk3Czvwb+FaAjKCdiCNruXvj",
	"23cQ1sqj87Fa1XTGt60rDyDjuUrmMV/9v9tcw4/n9bkuQb0aXYegn9rpfH09W91eo7tC0GLBKGCdRc4I",
	"uUhhjgp5ag6e4rzFVXFtlbcJexUGneXUotrtZnxcM0XNI2hv4HA0PgLcCnMtaVDGqHKhtq4dj8NZeKHq",
	"uJMGP58zW8ivMvjxVC3aEzuHvRYStOmLvpl5yPEJyEKruvL30fzn7G1f6Adcgu4L/lsY3gP7sWzZf+kb",
	"6bs8CU7Df0Ku/YPnxeujJNxZBvVkisP2ZopDt5gSXrBTwP3J4vD9yOKgfcniwL3Isu4oLdte7G9/Owi7",
	"su5Nzp+2UzI9qmM3jgedkurvhw6mlcb9jXrdmBF8Tbd8lYFEcg0PIgJydfvOFUh0veP2rvz9ANqUy9l5",
	"cM6s6SoHyXNhG9k5Ow/cOQqXLjjDsqraoCnj/trQuUuKd7Ed89zngX/NETK2r9lt1g1bdyHrAR33gblw",
	"bGfdJyzdLCnjDQbfqnh10iVMa+bdDLB+Gsr3REgSgZsQTp9v6+mk5mZzPGKBG6+CcBKM2Mg+HeTUZlbx",
	"5HZTy/dFSIGCI5C84lYdaReiN4TngnwXaUpStSDWgQxit77iryGJVhm5vXtDeIKgSSVQKElwCb44dw53",
	"x3CSFQbJPZBcpSnEpJAoUgfQYIc1Uh4OiJCxzRYYAsIWGVIdDIjSxDHXylKJQ+ZauTPD+r/D1sbgcQRx",
	"Z9vFL0XhF+bZyfQqDBBULsvk9q5K8zYodeoSIYVZQrwvdy9yi7r3wrPD7vqbNbCiXFKkDXI/kyEgY5XE",
	"fNVkxZ6NCTK2VsR89fzdWKv9dzbioEX0Gxl/SK756te3Ey8Ou/vzeRze53Zre/8klh+49fgFXEcoo7qA",
	"juB+dCwz5MP7nbj9AXhnoS/BltIUA/rBHc8/P9JCp3RKl4j5dDhMVcTTpTI4fc0uGF1/Wf8TAAD//6RM",
	"DNTnGQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
