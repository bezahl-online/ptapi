// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /abort)
	Abort(ctx echo.Context) error

	// (POST /authorise)
	Authorise(ctx echo.Context) error

	// (POST /authorise_completion)
	AuthoriseCompletion(ctx echo.Context) error

	// (POST /endofday)
	EndOfDay(ctx echo.Context) error

	// (POST /endofday_completion)
	EndOfDayCompletion(ctx echo.Context) error

	// (GET /test)
	GetTest(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Abort converts echo context to params.
func (w *ServerInterfaceWrapper) Abort(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Abort(ctx)
	return err
}

// Authorise converts echo context to params.
func (w *ServerInterfaceWrapper) Authorise(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorise(ctx)
	return err
}

// AuthoriseCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) AuthoriseCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthoriseCompletion(ctx)
	return err
}

// EndOfDay converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDay(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDay(ctx)
	return err
}

// EndOfDayCompletion converts echo context to params.
func (w *ServerInterfaceWrapper) EndOfDayCompletion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndOfDayCompletion(ctx)
	return err
}

// GetTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetTest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTest(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/abort", wrapper.Abort)
	router.POST(baseURL+"/authorise", wrapper.Authorise)
	router.POST(baseURL+"/authorise_completion", wrapper.AuthoriseCompletion)
	router.POST(baseURL+"/endofday", wrapper.EndOfDay)
	router.POST(baseURL+"/endofday_completion", wrapper.EndOfDayCompletion)
	router.GET(baseURL+"/test", wrapper.GetTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY/2/aOBT/Vyzf/VTR4gQGJfupg+q0m3artuqkapqQmzyIp8TObKcbqvjfT3YSiEMo",
	"kHa3u0lTQ+LP+/rx83t+xKFIM8GBa4WDRyxBZYIrsD+UpjpX1SvzJhRcA9fmkWZZwkKqmeD9r0pwCwhj",
	"SKl5+l3CAgf4t/5WfL/4qvqFWLxer3s4AhVKlhkpOCgVohSUoktA35mOUfkuFBEgyqPqIzboUqI1J9fx",
	"3ChLwAib163OpMhAalZ4VQkIHjH8oAaAA5wlQBWg75Rp3MN6lYE1RzK+xEZRYXId4vXwQsiUahxgxvXA",
	"3+IY17AEaYBaUq5oWPj3dFiMB0IyBVvbjY8SvuVMQoSDz5UZvY0PXzY6xf1XCLVR2SJnJwYR1fR0e+YW",
	"tu5hkFJIN4CapSDy1uBJUHmiT1Jn1jedL5RuxB3n+rzy1PWfssg1/4qU/4Ye8UibFzQVecH8DcofT4jL",
	"gtGwlQUhldEh/+2acu1cQxi7qo5iWyhXmRauZ9MpmY2nb2aTa+Jf+VdtroW5lMDDlctvf3CUTsYXDY3v",
	"qNSA6P0SEoj5HkqEwDI95w0WEeIbLUeEVINMGafJvJlJf0KIR8ioTa0hqdI0zRoQ4ntk4BFEJsPLwaAV",
	"mUsuHkA+w+KHfAfsETIeDScTf1dlg/y1gLnGbJJesqzS40ZoQ996DGqJL9N4cE+V+xh4nhqrMuCRsbaH",
	"VR6GoFQpvygE9F7I+j6tEa7cD+6m5DR1qzJpgWaUz2Gxk/Wzs7MzVP4/Q6/Gfmv+FXzLgYfQTMSRtdy+",
	"ce07CGvk0fpYrqo749rWlgfg0Vws5hFd/b+PuZofzzvn2gR1OuhaBP3Uk87V1/Go22v0TggU48sE5lpo",
	"mqiDvZmzuFky3W7t7u7u7vz9+/PZDMVxkKaB3f9uWT0ng/OBh7xxQF4FvtdaWo2u5tEzPO5g1ZKG0NzM",
	"/mB4FDjX4dy4t/WsdCzn7AfKdYjqtXIrf0QuB68uJ4PREVoaia3sdcvwxpAqGL1G0g4T4IUK8w5XXCpN",
	"zRlylcKPp8rgnmhb7IxxkKor+nrqIIcnIHMpqkOni+Y/p2+6Qj/oGGRX8N9M0Q7Yj0W38Je85q7LY+80",
	"/CdNpdvzji6PknBrGNSRKRbbmSkW3WCKPyKngLuTxeK7kcVCu5LFgjuRZd1SWrZtgLv9zQy+ewx82g7o",
	"+KhmodaZtEqqvh/qiUuN+3uEdW08cTXd0FUKXKMZPLAQ0NXNW1sgtT23bm6L3w8gVbGcXHgXxJguMuA0",
	"YzjAgwty4dkWTsc2OP2iqpqgCWX/mtDZ+5G3kZkw7eeee8PiE7LvRN6s6zeuYdY9POwCs+HYjtlPWLpZ",
	"UsQblH4jotVJ9z+NcXszO7tpKN4jxlEIdjg5fbSuBqOKm/XJjHh2svP8sTcgA/N0kFObMcmR204t1xfG",
	"mWZUA8pKblWRtiF6jWjG0HeWJCgRS2QcSCGy60v+KrSQIkU3t68RXWiQqBTIBEc6BlecHQHsBIDSXGl0",
	"DygTSQIRyrlmiQVIMHMiKpoDxHhksgUKATNFBpWNARISWeYaWWJhkZkUtmdY/3fYWpt5jiDudLv4pSj8",
	"wjw7mV65AqSFzTK6uS3TvA1KlboF40zFEO3L3Ytc4O69a22xu/pmDCwpt8iTGrmfyRDgkVhEdFVnxZ6N",
	"CTwyVkR09fzdWKn9dzZir0H0ax59WMzo6tcfJ04cdvfn8zi8z+3G9v5JLD9w4fILuK6hiOoSWoL70bJM",
	"oQ/vduL2B+hbA30JthSmKJAPtj3//IhzmeAAx1pnQb+fiJAmsVA6uCQjgtdf1v8EAAD//wv33CViGgAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
